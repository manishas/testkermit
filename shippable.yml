resources:
  - name: app1
    type: gitRepo
    repoPath: manishas/app
    configuration:
      integrationName: manishas_github
      branches:
        only: master
    initialVersion:
      sha: master

  - name: myDockerImg
    type: image
    imageName: demo/app
    configuration:
      integrationName: art
      isPull: false
    initialVersion:
      imageTag: latest

  # - name: myState
  #   type: state
  #
  # - name: p2pWebhook
  #   type: webhook
  #   configuration:
  #     integrationName: intWebhook
  #   initialVersion:
  #     payload: "foo=bar"
  #
  # - name: extWebhook
  #   type: webhook
  #   configuration:
  #     integrationName: myExtWebhook
  #   initialVersion:
  #     payload: "foo=bar"

pipelines:

  - name: test_pipeline
    steps:
      - name: test_func
        type: bash
        configuration:
          affinityGroup: build
          #nodePool: kermit_centos_pool
        setup:
          environmentVariables:
            normal:
              myFirstName: Manisha
              myLastName: Sahasrabudhe
            encrypted:
              myMiddleName: rscE49jQ0hzuqduXeUuiGb+I2vAktnWV316QE4AyIZ29dStL3cDeRKL5lrjAlgl/wmtyZ4AStoPtkynuoVF4aeqDkOcTChGLN5HtOIvH59eEYmYWQq98GW9UQZZcwXGpw0+diMBbUCpre657ufhPvLfbZEo9zIEAFetGiDIJITT9/GDnJWokVHq8qB/i2rD7nw4Fks5rJF5oN5NC5Hkq5FnljNXvdWHCqDVKkjQnEr4XPzULn7TX5mWAosewc13CmY2NRYifYG0nBQm9dqFDsyTnqlu68wXYa4KJYoGz9tJXP8l/O5fdoknEK6xvwT9cjZ9GdcsJtc/QRJXW8zq+RQ==
        requires:
          resources:
            - app1
        execution:
          onExecute:
            - echo $myFirstName
            - echo $myLastName
            - echo $myMiddleName
            - printenv
            - write_output myDockerImg "imageTag="$STEP_ID
        outputResources:
          - myDockerImg

      - name: test_func_next
        type: bash
        configuration:
          affinityGroup: build
          #nodePool: kermit_centos_pool
        triggeredBy:
          resources:
            - myDockerImg
        execution:
          onExecute:
            - printenv
            - echo $res_myDockerImg_imageTag

      - name: parallel_1
        type: bash
        triggeredBy:
          steps:
            - test_func_next
        execution:
          onExecute:
            - printenv
            - echo $imageTag


      - name: parallel_2
        type: bash
        triggeredBy:
          steps:
            - test_func_next
        execution:
          onExecute:
            - printenv

      - name: parallel_3
        type: bash
        triggeredBy:
          steps:
            - test_func_next
        execution:
          onExecute:
            - printenv

      - name: final_step
        type: bash
        triggeredBy:
          steps:
            - parallel_2
            - parallel_1
            - parallel_3
        execution:
          onExecute:
            - printenv



  - name: second_test_pipeline
    steps:
      - name: first_step
        type: bash
        requires:
          resources:
            - app1
        execution:
          onExecute:
            - printenv


  #
  #
  # - name: ci_pipeline
  #   steps:
  #     - name: build
  #       type: bash
  #       setup:
  #         runtime:
  #           type: image
  #           image:
  #            custom:
  #              name: drydock/u16all
  #              tag: master
  #       triggeredBy:
  #         resources:
  #           - app
  #       execution:
  #         onExecute:
  #           - pushd $res_app_resourcePath
  #           - docker build -t app:latest .
  #
  #     - name: test
  #       type: bash
  #       setup:
  #         runtime:
  #           type: image
  #           image:
  #            custom:
  #              name: drydock/u16all
  #              tag: master
  #       triggeredBy:
  #         steps:
  #           - build
  #       execution:
  #         onExecute:
  #           - docker run --name "test_app" app:latest bash -c "pwd"
  #           - docker rm -fv "test_app"
  #
  #     - name: push
  #       type: bash
  #       setup:
  #         runtime:
  #           type: image
  #           image:
  #            custom:
  #              name: drydock/u16all
  #              tag: master
  #       requires:
  #         integrations:
  #           - art
  #       triggeredBy:
  #         steps:
  #           - test
  #       execution:
  #         onExecute:
  #           - docker login -u $int_art_username -p $int_art_password $int_art_url
  #           - artIp=$(echo $int_art_url | awk -F[/:] '{print $4}')
  #           - artPort=$(echo $int_art_url | awk -F[/:] '{print $5}')
  #           - echo "$artIp:$artPort"
  #           - docker tag app:latest $artIp:$artPort/demo/app:$STEP_ID
  #           - docker push $artIp:$artPort/demo/app:$STEP_ID
  #
  #     - name: job2
  #       type: bash
  #       setup:
  #         runtime:
  #           type: image
  #           image:
  #            custom:
  #              name: drydock/u16all
  #              tag: master
  #
  #       triggeredBy:
  #         steps:
  #           - build
  #       execution:
  #         onExecute:
  #           - echo "job2...."
